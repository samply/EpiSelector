means_treated <- list()
means_control <- list()
mean_diff <- list()
for (x in 1:length(column_names)) {
means_treated[x] <- s$sum.matched[x,1]
means_control[x] <- s$sum.matched[x,2]
mean_diff[x] <- s$sum.matched[x,3]
}
View(mean_diff)
means_treated <- list()
means_control <- list()
mean_diff <- list()
for (x in 1:length(column_names)) {
means_treated[[x]] <- s$sum.matched[x,1]
means_control[[x]] <- s$sum.matched[x,2]
mean_diff[[x]] <- s$sum.matched[x,3]
}
df <- data.frame(column_names, means_treated, means_control, mean_diff)
column_names <- attributes(s$sum.matched)$dimnames[[1]]
means_treated <- list()
means_control <- list()
mean_diff <- list()
for (x in 1:length(column_names)) {
means_treated[[x]] <- s$sum.matched[x,1]
means_control[[x]] <- s$sum.matched[x,2]
mean_diff[[x]] <- s$sum.matched[x,3]
}
df <- data.frame(column_names, means_treated, means_control, mean_diff)
toJSON(df)
column_names <- attributes(s$sum.matched)$dimnames[[1]]
means_treated <- list()
means_control <- list()
mean_diff <- list()
for (x in 1:length(column_names)) {
means_treated[[x]] <- s$sum.matched[x,1]
means_control[[x]] <- s$sum.matched[x,2]
mean_diff[[x]] <- s$sum.matched[x,3]
}
df <- data.frame(unlist(column_names), unlist(means_treated), unlist(means_control), unlist(mean_diff))
toJSON(df)
for (x in 1:length(column_names)) {
list_data[[x]] <- list()
}
column_names <- attributes(s$sum.matched)$dimnames[[1]]
means_treated <- list()
means_control <- list()
mean_diff <- list()
for (x in 1:length(column_names)) {
means_treated[[x]] <- s$sum.matched[x,1]
means_control[[x]] <- s$sum.matched[x,2]
mean_diff[[x]] <- s$sum.matched[x,3]
}
df <- data.frame(unlist(column_names))
toJSON(df)
df <- data.frame(unlist(column_names))
toJSON(df)
df <- data.frame(column_names)
df <- data.frame(column_names)
df <- data.frame(column_names)
toJSON(df)
df <- data.frame(unlist(means_treated))
toJSON(df)
toJSON(df)
df <- data.frame(c("a","b","c"))
toJSON(df)
library(jsonlite)
ID=c(100,110,200)
Title= unlist(list_data)
print(Title)
Title=c("distance", "age", "educ")
print(Title)
df <- data.frame(ID, Title)
more=data.frame(Interesting=c("yes","no","yes"),new=c("no","yes","yes"),original=c("yes","yes","no"))
df$more <- more
toJSON(df)
name <- c("a","b","c")
df <- data.frame(name)
toJSON(df)
df <- data.frame(column_names)
toJSON(df)
name <- column_names
df <- data.frame(name)
toJSON(df)
variable_name <- column_names
df <- data.frame(variable_name)
toJSON(df)
variable_name <- column_names
df <- data.frame(variable_name)
toJSON(df)
df <- data.frame(means_treated)
toJSON(df)
means_treated <- means_treated
df <- data.frame(means_treated)
toJSON(df)
means_treated_2 <- means_treated
df <- data.frame(means_treated_2)
toJSON(df)
means_treated <- list()
means_control <- list()
mean_diff <- list()
for (x in 1:length(column_names)) {
means_treated[x] <- s$sum.matched[x,1]
means_control[x] <- s$sum.matched[x,2]
mean_diff[x] <- s$sum.matched[x,3]
}
variable_name <- column_names
means_treated_2 <- means_treated
df <- data.frame(means_treated_2)
toJSON(df)
column_names <- attributes(s$sum.matched)$dimnames[[1]]
means_treated <- list()
means_control <- list()
mean_diff <- list()
for (x in 1:length(column_names)) {
means_treated[x] <- s$sum.matched[x,1]
means_control[x] <- s$sum.matched[x,2]
mean_diff[x] <- s$sum.matched[x,3]
}
variable_name <- column_names
means_treated_2 <- means_treated
df <- data.frame(means_treated_2)
toJSON(df)
column_names <- attributes(s$sum.matched)$dimnames[[1]]
means_treated <- list()
means_control <- list()
mean_diff <- list()
for (x in 1:length(column_names)) {
means_treated[x] <- s$sum.matched[x,1]
means_control[x] <- s$sum.matched[x,2]
mean_diff[x] <- s$sum.matched[x,3]
}
variable_name <- column_names
means_treated_2 <- means_treated
df <- data.frame(means_treated_2)
toJSON(df)
df <- data.frame(ID, Title)
more=data.frame(Interesting=c("yes","no","yes"),new=c("no","yes","yes"),original=c("yes","yes","no"))
df$more <- more
toJSON(df)
print(s$sum.matched[2,1])
library(jsonlite)
ID=c(100,110,200)
Title= unlist(list_data)
print(Title)
Title=c("distance", "age", "educ")
print(Title)
column_names <- attributes(s$sum.matched)$dimnames[[1]]
means_treated <- list()
means_control <- list()
mean_diff <- list()
for (x in 1:length(column_names)) {
means_treated[x] <- s$sum.matched[x,1]
means_control[x] <- s$sum.matched[x,2]
mean_diff[x] <- s$sum.matched[x,3]
}
variable_name <- column_names
means_treated_2 <- means_treated
df <- data.frame(means_treated_2)
toJSON(df)
column_names <- attributes(s$sum.matched)$dimnames[[1]]
means_treated <- list()
means_control <- list()
mean_diff <- list()
for (x in 1:length(column_names)) {
means_treated[x] <- s$sum.matched[x,1]
means_control[x] <- s$sum.matched[x,2]
mean_diff[x] <- s$sum.matched[x,3]
}
variable_name <- column_names
df <- data.frame(means_treated)
toJSON(df)
variable_name <- column_names
means_treated_2 <- unlist(means_treated)
df <- data.frame(means_treated_2)
toJSON(df)
variable_name <- column_names
means_treated <- unlist(means_treated_list)
df <- data.frame(means_treated)
toJSON(df)
variable_name <- column_names
means_treated <- unlist(means_treated_list)
df <- data.frame(means_treated)
toJSON(df)
column_names <- attributes(s$sum.matched)$dimnames[[1]]
means_treated_list <- list()
means_control_list <- list()
mean_diff_list <- list()
for (x in 1:length(column_names)) {
means_treated_list[x] <- s$sum.matched[x,1]
means_control_list[x] <- s$sum.matched[x,2]
mean_diff_list[x] <- s$sum.matched[x,3]
}
variable_name <- column_names
means_treated <- unlist(means_treated_list)
df <- data.frame(means_treated)
toJSON(df)
column_names <- attributes(s$sum.matched)$dimnames[[1]]
means_treated_list <- list()
means_control_list <- list()
mean_diff_list <- list()
for (x in 1:length(column_names)) {
means_treated_list[x] <- s$sum.matched[x,1]
means_control_list[x] <- s$sum.matched[x,2]
mean_diff_list[x] <- s$sum.matched[x,3]
}
variable_name <- column_names
means_treated <- unlist(means_treated_list)
df <- data.frame(column_names, means_treated)
toJSON(df)
s <- summary(m.out1, un=FALSE)
column_names <- attributes(s$sum.matched)$dimnames[[1]]
means_treated_list <- list()
means_control_list <- list()
mean_diff_list <- list()
for (x in 1:length(column_names)) {
means_treated_list[x] <- s$sum.matched[x,1]
means_control_list[x] <- s$sum.matched[x,2]
mean_diff_list[x] <- s$sum.matched[x,3]
}
variable_name <- column_names
means_treated <- unlist(means_treated_list)
means_control <- unlist(means_control_list)
mean_diff <- unlist(mean_diff_list)
df <- data.frame(column_names, means_treated, means_control, mean_diff)
toJSON(df)
s <- summary(m.out1, un=FALSE)
column_names <- attributes(s$sum.matched)$dimnames[[1]]
means_treated_list <- list()
means_control_list <- list()
mean_diff_list <- list()
for (x in 1:length(column_names)) {
means_treated_list[x] <- s$sum.matched[x,1]
means_control_list[x] <- s$sum.matched[x,2]
mean_diff_list[x] <- s$sum.matched[x,3]
}
variable_name <- column_names
means_treated <- unlist(means_treated_list)
means_control <- unlist(means_control_list)
mean_diff <- unlist(mean_diff_list)
df <- data.frame(variable_name, means_treated, means_control, mean_diff)
toJSON(df)
s <- summary(m.out1, un=FALSE)
print(s)
plumber::plumb(file='C:/Users/d627m/../Documents/GitHub_Local/kontrollgruppenselektion/statistic_backend/test233242/plumber.R')$run()
library("MatchIt")
library(rjson)
library(stringr)
data("lalonde")
lst1=list(c("karthik","nikhil","sravan"))
arr=array(unlist(lst1))
print(arr)
library("MatchIt")
library("ggplot2")
library("cobalt")
data("lalonde", package = "cobalt")
#Nearest Neighbor Matching
library(MatchIt)
m.out1 <- matchit(treat ~ age + educ + race +
married + nodegree + re74 + re75,
data = lalonde)
library("MatchIt")
library(rjson)
library(stringr)
data("lalonde")
lst1=list(c("karthik","nikhil","sravan"))
arr=array(unlist(lst1))
print(arr)
library("MatchIt")
library("ggplot2")
library("cobalt")
data("lalonde", package = "cobalt")
#Nearest Neighbor Matching
library(MatchIt)
m.out1 <- matchit(treat ~ age + educ + race +
married + nodegree + re74 + re75,
data = lalonde)
m <- bal.plot(m.out1, "distance", which = "both", mirror = TRUE,
type = "histogram", colors = c("white", "black"))
library("MatchIt")
library(rjson)
library(stringr)
data("lalonde")
lst1=list(c("karthik","nikhil","sravan"))
arr=array(unlist(lst1))
print(arr)
library("MatchIt")
library("ggplot2")
library("cobalt")
data("lalonde", package = "cobalt")
#Nearest Neighbor Matching
library(MatchIt)
m.out1 <- matchit(treat ~ age + educ + race +
married + nodegree + re74 + re75,
data = lalonde)
bal.plot(m.out1, "distance", which = "both", mirror = TRUE,
type = "histogram", colors = c("white", "black"))
library("MatchIt")
library(rjson)
library(stringr)
data("lalonde")
lst1=list(c("karthik","nikhil","sravan"))
arr=array(unlist(lst1))
print(arr)
library("MatchIt")
library("ggplot2")
library("cobalt")
data("lalonde", package = "cobalt")
#Nearest Neighbor Matching
library(MatchIt)
m.out1 <- matchit(treat ~ age + educ + race +
married + nodegree + re74 + re75,
data = lalonde)
boxres_dataset <- match.data(m.out1,
group = "all",
distance = "distance",
weights = "weights",
subclass = "subclass",
data = lalonde,
include.s.weights = TRUE,
drop.unmatched = TRUE)
bal.plot(boxres_dataset, "distance", which = "both", mirror = TRUE,
type = "histogram", colors = c("white", "black"))
library("MatchIt")
library(rjson)
library(stringr)
data("lalonde")
lst1=list(c("karthik","nikhil","sravan"))
arr=array(unlist(lst1))
print(arr)
library("MatchIt")
library("ggplot2")
library("cobalt")
data("lalonde", package = "cobalt")
#Nearest Neighbor Matching
library(MatchIt)
m.out1 <- matchit(treat ~ age + educ + race +
married + nodegree + re74 + re75,
data = lalonde)
boxres_dataset <- match.data(m.out1,
group = "all",
distance = "distance",
weights = "weights",
subclass = "subclass",
data = lalonde,
include.s.weights = TRUE)
bal.plot(boxres_dataset, "distance", which = "both", mirror = TRUE,
type = "histogram", colors = c("white", "black"))
library("MatchIt")
library(rjson)
library(stringr)
data("lalonde")
lst1=list(c("karthik","nikhil","sravan"))
arr=array(unlist(lst1))
print(arr)
library("MatchIt")
library("ggplot2")
library("cobalt")
data("lalonde", package = "cobalt")
#Nearest Neighbor Matching
library(MatchIt)
m.out1 <- matchit(treat ~ age + educ + race +
married + nodegree + re74 + re75,
data = lalonde)
boxres_dataset <- match.data(m.out1,
group = "all",
distance = "distance",
weights = "weights",
subclass = "subclass",
data = lalonde,
include.s.weights = TRUE)
bal.plot(boxres_dataset, treat = "treat",  "distance", which = "both", mirror = TRUE,
type = "histogram", colors = c("white", "black"))
library("MatchIt")
library(rjson)
library(stringr)
data("lalonde")
lst1=list(c("karthik","nikhil","sravan"))
arr=array(unlist(lst1))
print(arr)
library("MatchIt")
library("ggplot2")
library("cobalt")
data("lalonde", package = "cobalt")
#Nearest Neighbor Matching
library(MatchIt)
m.out1 <- matchit(treat ~ age + educ + race +
married + nodegree + re74 + re75,
data = lalonde)
boxres_dataset <- match.data(m.out1,
group = "all",
distance = "distance",
weights = "weights",
subclass = "subclass",
data = lalonde,
include.s.weights = TRUE)
bal.plot(boxres_dataset, treat = "treat",  "distance", which = "both", mirror = TRUE,
type = "histogram", colors = c("white", "black"))
plumber::plumb(file='C:/Users/d627m/../Documents/GitHub_Local/kontrollgruppenselektion/statistic_backend/Test2/plumber.R')$run()
plumb(file='C:/Users/d627m/../Documents/GitHub_Local/kontrollgruppenselektion/statistic_backend/Test2/plumber.R')$run()
plumb(file='C:/Users/d627m/../Documents/GitHub_Local/kontrollgruppenselektion/statistic_backend/Test2/plumber.R')$run()
plumb(file='C:/Users/d627m/../Documents/GitHub_Local/kontrollgruppenselektion/statistic_backend/Test2/plumber.R')$run()
plumb(file='C:/Users/d627m/../Documents/GitHub_Local/kontrollgruppenselektion/statistic_backend/Test2/plumber.R')$run()
plumb(file='C:/Users/d627m/../Documents/GitHub_Local/kontrollgruppenselektion/statistic_backend/Test2/plumber.R')$run()
plumb(file='C:/Users/d627m/../Documents/GitHub_Local/kontrollgruppenselektion/statistic_backend/Test2/plumber.R')$run()
plumb(file='C:/Users/d627m/../Documents/GitHub_Local/kontrollgruppenselektion/statistic_backend/Test2/plumber.R')$run()
library("MatchIt")
library("ggplot2")
library("cobalt")
data("lalonde", package = "MatchIt")
#1:1 NN matching w/ replacement on a logistic regression PS
m.boxout <- matchit(treat ~ age + educ + race + married +
nodegree + re74 + re75, data = lalonde,
replace = TRUE)
m.boxout
## A matchit object
##  - method: 1:1 nearest neighbor matching with replacement
##  - distance: Propensity score
##              - estimated with logistic regression
##  - number of obs.: 614 (original), 265 (matched)
##  - target estimand: ATT
##  - covariates: age, educ, race, married, nodegree, re74, re75
# Construct a matched dataset from a matchit object -> Ausgabedatei für die User zur weiteren Analyse
boxres_dataset <- match.data(m.boxout,
group = "all",
distance = "distance",
weights = "weights",
subclass = "subclass",
data = lalonde,
include.s.weights = TRUE,
drop.unmatched = TRUE)
boxplot(age ~ treat, data = lalonde,
col = c("#FFE0B2", "#FFA726"))
boxplot(age ~ treat, data = boxres_dataset,
col = c("#1C4189", "#B11B18", "#DFE5E9"))
unadjusted_sample <- boxplot(age ~ treat, data = lalonde,
col = c("#FFE0B2", "#FFA726"))
data_points <- unadjusted_sample$stats
outliers <_ unadjusted_sample$stats$out
outliers_group <_ unadjusted_sample$stats$group
unadjusted_sample <- boxplot(age ~ treat, data = lalonde,
col = c("#FFE0B2", "#FFA726"))
data_points <- unadjusted_sample$stats
outliers <_ unadjusted_sample$stats$out
outliers_group <_ unadjusted_sample$stats$group
unadjusted_sample <- boxplot(age ~ treat, data = lalonde,
col = c("#FFE0B2", "#FFA726"))
data_points <- unadjusted_sample$stats
outliers <_ unadjusted_sample$stats$out
outliers_group <_ unadjusted_sample$stats$group
col = c("#FFE0B2", "#FFA726"))
data_points <- unadjusted_sample$stats
outliers <_ unadjusted_sample$stats$out
outliers_group <_ unadjusted_sample$stats$group
print(data_points)
print(outliers)
print(outliers_group)
library("MatchIt")
library("ggplot2")
library("cobalt")
data("lalonde", package = "MatchIt")
#1:1 NN matching w/ replacement on a logistic regression PS
m.boxout <- matchit(treat ~ age + educ + race + married +
nodegree + re74 + re75, data = lalonde,
replace = TRUE)
m.boxout
## A matchit object
##  - method: 1:1 nearest neighbor matching with replacement
##  - distance: Propensity score
##              - estimated with logistic regression
##  - number of obs.: 614 (original), 265 (matched)
##  - target estimand: ATT
##  - covariates: age, educ, race, married, nodegree, re74, re75
# Construct a matched dataset from a matchit object -> Ausgabedatei für die User zur weiteren Analyse
boxres_dataset <- match.data(m.boxout,
group = "all",
distance = "distance",
weights = "weights",
subclass = "subclass",
data = lalonde,
include.s.weights = TRUE,
drop.unmatched = TRUE)
boxplot(age ~ treat, data = lalonde,
col = c("#FFE0B2", "#FFA726"))
boxplot(age ~ treat, data = boxres_dataset,
col = c("#1C4189", "#B11B18", "#DFE5E9"))
unadjusted_sample <- boxplot(age ~ treat, data = lalonde,
col = c("#FFE0B2", "#FFA726"))
data_points <- unadjusted_sample$stats
outliers <- unadjusted_sample$stats$out
outliers_group <- unadjusted_sample$stats$group
print(data_points)
print(outliers)
print(outliers_group)
View(unadjusted_sample)
outliers <- unadjusted_sample$out
print(outliers)
plumb(file='C:/Users/d627m/../Documents/GitHub_Local/kontrollgruppenselektion/statistic_backend/Test2/plumber.R')$run()
plumb(file='C:/Users/d627m/../Documents/GitHub_Local/kontrollgruppenselektion/statistic_backend/Test2/plumber.R')$run()
plumb(file='C:/Users/d627m/../Documents/GitHub_Local/kontrollgruppenselektion/statistic_backend/Test2/plumber.R')$run()
plumb(file='C:/Users/d627m/../Documents/GitHub_Local/kontrollgruppenselektion/statistic_backend/Test2/plumber.R')$run()
plumb(file='C:/Users/d627m/../Documents/GitHub_Local/kontrollgruppenselektion/statistic_backend/Test2/plumber.R')$run()
plumb(file='C:/Users/d627m/../Documents/GitHub_Local/kontrollgruppenselektion/statistic_backend/Test2/plumber.R')$run()
plumb(file='C:/Users/d627m/../Documents/GitHub_Local/kontrollgruppenselektion/statistic_backend/Test2/plumber.R')$run()
plumb(file='C:/Users/d627m/../Documents/GitHub_Local/kontrollgruppenselektion/statistic_backend/Test2/plumber.R')$run()
plumb(file='C:/Users/d627m/../Documents/GitHub_Local/kontrollgruppenselektion/statistic_backend/Test2/plumber.R')$run()
plumb(file='C:/Users/d627m/../Documents/GitHub_Local/kontrollgruppenselektion/statistic_backend/Test2/plumber.R')$run()
plumb(file='C:/Users/d627m/../Documents/GitHub_Local/kontrollgruppenselektion/statistic_backend/Test2/plumber.R')$run()
plumb(file='C:/Users/d627m/../Documents/GitHub_Local/kontrollgruppenselektion/statistic_backend/Test2/plumber.R')$run()
plumb(file='C:/Users/d627m/../Documents/GitHub_Local/kontrollgruppenselektion/statistic_backend/Test2/plumber.R')$run()
plumb(file='C:/Users/d627m/../Documents/GitHub_Local/kontrollgruppenselektion/statistic_backend/Test2/plumber.R')$run()
plumb(file='C:/Users/d627m/../Documents/GitHub_Local/kontrollgruppenselektion/statistic_backend/Test2/plumber.R')$run()
plumb(file='C:/Users/d627m/../Documents/GitHub_Local/kontrollgruppenselektion/statistic_backend/Test2/plumber.R')$run()
